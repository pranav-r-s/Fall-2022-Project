package wordle.project.base;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.swing.*;
import javax.swing.border.Border;



//solver part
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Random;


public class WordleGame implements ActionListener {


	private int auto_mode;
	private String color_string;
	//	private static WordleGame w;
	public int end = 0;

	//solver vars
	public String[] validGuesses = new String[12972];
	public String[] validAnswers = new String[2315];
	public ArrayList<Character> blackLetters = new ArrayList<Character>();
	public ArrayList<String> refinedAnswers = new ArrayList<String>();
	public int count = 0;
	public ArrayList<wordFrequency> listOfWords = new ArrayList<wordFrequency>();
	public String test_word = "";
	public List<String> wordList;


	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
	}

	//----------------- UI windows , elements
	class WordPanel extends JPanel {

		JLabel[] wordColumns = new JLabel[5];

		public WordPanel()// panel having a 5 letter word will be filled here
		{
			this.setLayout(new GridLayout(1, 5));
			Border blackBorder = BorderFactory.createLineBorder(Color.LIGHT_GRAY);

			for (int i = 0; i < 5; i++) {
				wordColumns[i] = new JLabel();
				wordColumns[i].setHorizontalAlignment(JLabel.CENTER);
				wordColumns[i].setOpaque(true);
				wordColumns[i].setBorder(blackBorder);
				this.add(wordColumns[i]);
			}
		}


		public void clearWordPanel() {
			for (int i = 0; i < 5; i++) {
				wordColumns[i].setText("");
			}
		}

		public void setPanelText(String charValue, int position, Color color) {
			this.wordColumns[position].setText(charValue);
			this.wordColumns[position].setBackground(color);
		}
	}

	class UserPanel extends JPanel {

		private JTextField userInput;
		private JButton okButton;
		private JRadioButton btn_auto;
		private JRadioButton btn_manual;
		private ButtonGroup mode = new ButtonGroup();


		public UserPanel() {
			this.setLayout(new GridLayout(2, 2));
			btn_auto = new JRadioButton("Auto");
			this.add(btn_auto);
			btn_manual = new JRadioButton("Manual");
			this.add(btn_manual);
			this.mode.add(btn_auto);
			this.mode.add(btn_manual);

			userInput = new JTextField();
			this.add(userInput);
			okButton = new JButton("OK");
			this.add(okButton);

		}

		public JTextField getUserInput() {
			return userInput;
		}

		public JButton getOkButton() {
			return okButton;
		}

		public JRadioButton getBtnAuto() {
			return btn_auto;
		}

		public JRadioButton getBtnManual() {
			return btn_manual;
		}
	}

	//------------------------------


	//----------------- code execution

	private JFrame gameFrame;
	private WordPanel[] wordPanelArray = new WordPanel[6];
	private UserPanel userPanel;
	private String wordleString;
	private int chance_number = 0; //

	public WordleGame() {
		String color_string = "";
		gameFrame = new JFrame("Wordle Game");
		gameFrame.setSize(500, 500);
		gameFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		gameFrame.setLayout(new GridLayout(8, 1));
		gameFrame.setVisible(true);
		gameFrame.setLocationRelativeTo(null);

		userPanel = new UserPanel();
		userPanel.getOkButton().addActionListener(this);
		userPanel.getBtnAuto().addActionListener(this);
		userPanel.getBtnManual().addActionListener(this);
		gameFrame.add(userPanel);

		for (int i = 0; i < 6; i++) {
			wordPanelArray[i] = new WordPanel();
			gameFrame.add(wordPanelArray[i]);
		}

		gameFrame.revalidate();
		gameFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		wordleString = getWordleString();//the word of the day

		System.out.println("Word for the day : " + wordleString);
	}

	public static void main(String[] args) {
		while (true) {
			WordleGame w = new WordleGame();
			w.setVariables();
			w.setWordFrequencyList();
			boolean finished = false;
			while (!finished && w.end == 0) {
//			if (w.auto_mode == 1)
				{
					try {
						TimeUnit.MILLISECONDS.sleep(1000);
					} catch (Exception f) {
					}

					w.gen_test_word();


					w.auto_mode_sequence();

					if (w.end == 0)
						try {
							finished = w.findWord();// test_word will get updated
						} catch (Exception g) {
							System.out.println("!!!! Exception occured with word=" + w.test_word + " ");
						}

				}

			}
		}

//		while (true) {
//			try {
//				TimeUnit.MILLISECONDS.sleep(10);
//			} catch (Exception f) {
//			}
//			; // check delay 10ms
//
//			if (w.auto_mode == 1) {
//				w.auto_mode_sequence();
////				w.auto_mode = 0;
//			}
//
//			if (end == 1) System.exit(0);// end program
//
//		}
		// testing the check word function


	}

	//------------------------------


	//--- get a random word from the list during the start of the game
	public String getWordleString() {
		Path path = Paths.get("..\\\\wordle.project\\\\assets\\\\Words.txt");
		wordList = new ArrayList<>();
		try {
			wordList = Files.readAllLines(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Random random = new Random();
		int position = random.nextInt(wordList.size());
		return wordList.get(position).trim().toUpperCase();
//		return "SPEED";
	}

	//--- check the word for the answer bot and then return the color result
	public String check_word(String userWord) {
		this.color_string = "";
		if (userWord.length() == 5 && wordList.contains(userWord)) {
			if (isWordleWordEqualTo(userWord.trim().toUpperCase())) {
//				JOptionPane.showMessageDialog(null, "You Win!!!", "Congrats", JOptionPane.INFORMATION_MESSAGE);
				clearAllPanels();
				System.out.println("\n>>>>>> Won in " + (chance_number + 1) + " chances !\n");
				gameFrame.dispose();
				end = 1;
			}
			chance_number++;
		} else {
			System.out.println("!! Incorrect length of the word, must be 5 or incorrect word entered");
		}

		if (chance_number > 5) {
//			JOptionPane.showMessageDialog(null, "You Lost.Better luck next time.", "Oops",
//					JOptionPane.INFORMATION_MESSAGE);
			System.out.println("\nXXXXXXX Lost in " + (chance_number + 1) + " chances !\n");
			gameFrame.dispose();
			end = 1;
		}
		return this.color_string;

	}

	//--- action performed when the ok button is clicked
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(userPanel.okButton)) {
			String userWord = this.userPanel.getUserInput().getText();
			System.out.println(check_word(userWord));
//			if (userWord.length() > 4 && wordList.contains(userWord)) {
//				if (isWordleWordEqualTo(userWord.trim().toUpperCase())) {
//					JOptionPane.showMessageDialog(null, "You Win!!!", "Congrats", JOptionPane.INFORMATION_MESSAGE);
//					clearAllPanels();
//					System.out.println("\nWon in " + (chance_number + 1) + " chances !");
//					gameFrame.dispose();
//					return;
//				}
//
//				chance_number++;
//				this.color_string = "";
//			} else {
//				System.out.println("!! Incorrect length of the word, must be 5 or incorrect word entered");
//			}
//
//			if (chance_number > 5) {
//				JOptionPane.showMessageDialog(null, "You Lost.Better luck next time.", "Oops",
//						JOptionPane.INFORMATION_MESSAGE);
//				gameFrame.dispose();
//				return;
//			}
		} else if (e.getSource().equals(userPanel.btn_auto)) {
			System.out.println("btn_auto pressed");
			auto_mode = 1;

		} else if (e.getSource().equals(userPanel.btn_manual)) {
			System.out.println("btn_manual pressed: MANUAL mode active");
			auto_mode = 0;
		}

	}

	public void auto_mode_sequence() {
		try {
			Random random = new Random();
			System.out.println(this.check_word(test_word));
			TimeUnit.MILLISECONDS.sleep(500);
//			System.out.println(w.check_word("ghost"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("guest"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("world"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("small"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("mails"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("calls"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("stall"));
		} catch (Exception ee) {
			System.out.println("Exception in auto");
		}

	}

	public int count_check(String s, String c) {
		int count = 0;
		String[] s_arr = s.split("");
		for (int i = 0; i < s.length(); i++) {
			if (c.equals(s_arr[i])) {
				count++;
			}
		}
		return count;
	}

	//--- take the word input and change the color of the boxes according to the word input
	private boolean isWordleWordEqualTo(String userWord) {
		List<String> wordleWordsList = Arrays.asList(wordleString.split(""));
		String[] userWordsArray = userWord.split("");
		List<Boolean> wordMatchesList = new ArrayList<>();
		System.out.println("Chance " + (chance_number + 1) + " = " + userWord);
		String checked_chars = "";// letters checked until that instant

		for (int i = 0; i < 5; i++) // checking for each letter in the word inputted and then updating the color of the panel text for each letter
		{
			checked_chars = checked_chars + userWordsArray[i];
//			System.out.println("count of " + userWordsArray[i] + " is " + count_check(userWord, userWordsArray[i]) );
			if (wordleWordsList.contains(userWordsArray[i]) && wordleWordsList.get(i).equals(userWordsArray[i])) {
				getActivePanel().setPanelText(userWordsArray[i], i, Color.GREEN);
				wordMatchesList.add(true);
				this.color_string = this.color_string + "g";
			} else if (wordleWordsList.contains(userWordsArray[i]) && count_check(wordleString, userWordsArray[i]) >= count_check(checked_chars, userWordsArray[i])) {

				getActivePanel().setPanelText(userWordsArray[i], i, Color.YELLOW);
				wordMatchesList.add(false);
				this.color_string = this.color_string + "y";

			} else {
				getActivePanel().setPanelText(userWordsArray[i], i, Color.GRAY);
				wordMatchesList.add(false);
				this.color_string = this.color_string + "b";
			}
		}
		this.gameFrame.revalidate();
		return !wordMatchesList.contains(false);
	}
	// MITAL's function
//	private boolean isWordleWordEqualTo(String userWord) {
//		List<String> wordleWordsList = Arrays.asList(wordleString.split(""));
//		String[] userWordsArray = userWord.split("");
//		List<Boolean> wordMatchesList = new ArrayList<>();
//		System.out.println("Chance " + (chance_number + 1) + " = " + userWord);
//		String enteredWord = "";
//		for (int i = 0; i < 5; i++) // checking for each letter in the word inputted and then updating the color of the panel text
//		{
//			if (wordleWordsList.contains(userWordsArray[i])) {
//				if (wordleWordsList.get(i).equals(userWordsArray[i])) {
//					System.out.println(getActivePanel() + "GetActivePanel");
//					getActivePanel().setPanelText(userWordsArray[i], i, Color.GREEN);
//					wordMatchesList.add(true);
//					this.color_string = this.color_string + "G";
//				}
//				else
//				{
//					// No of Occurences
//					int letterCount = 0;
//					if (enteredWord.contains(userWordsArray[i]))
//					{
//						for (int j = 0; j < 5; j++)
//						{
//							if (wordleWordsList.get(j).contains(userWordsArray[i])) {
//								letterCount = letterCount + 1;
//							}
//						}
//
//						if (letterCount > 1)
//						{
//							getActivePanel().setPanelText(userWordsArray[i], i, Color.YELLOW);
//							wordMatchesList.add(false);
//							this.color_string = this.color_string + "Y";
//						} else
//						{
//							getActivePanel().setPanelText(userWordsArray[i], i, Color.GRAY);
//							wordMatchesList.add(false);
//							this.color_string = this.color_string + "-";
//						}
//					} else {
//						getActivePanel().setPanelText(userWordsArray[i], i, Color.YELLOW);
//						wordMatchesList.add(false);
//						this.color_string = this.color_string + "Y";
//					}
//				}
//			}
//
//			else {
//				getActivePanel().setPanelText(userWordsArray[i], i, Color.GRAY);
//				wordMatchesList.add(false);
//				this.color_string = this.color_string + "-";
//			}
//			enteredWord = enteredWord + userWordsArray[i];
//		}
//		return !wordMatchesList.contains(false);
//	}

	public WordPanel getActivePanel() {
		return this.wordPanelArray[chance_number];
	}

	private void clearAllPanels() {
		for (int i = 0; i <= chance_number; i++) {
			wordPanelArray[i].clearWordPanel();
		}
	}


	// solver methods
	public void setWordFrequencyList() {
		Scanner sc = null;
		try {
			sc = new Scanner(new File("./unigram_freq.csv"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		while (sc.hasNext())  //returns a boolean value
		{
			String word = sc.next();
			if (!(word.equals("word,count"))) {

				String[] list = word.split(",");
				if (list[0].length() == 5) {
					listOfWords.add(new wordFrequency(list[0], Integer.parseInt(list[1])));
				}
			}
		}
		sc.close();  //closes the scanner
	}

	public void setVariables() {
		int tracker = 0;
		int tracker2 = 0;

		Scanner sc = null;
		try {
			sc = new Scanner(new File("./valid_guesses.csv"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		while (sc.hasNext())  //returns a boolean value
		{
			String word = sc.next();
			if (!(word.equals("word"))) {
				validGuesses[tracker] = word;
				tracker++;
			}
		}
		sc.close();  //closes the scanner

		Scanner sc2 = null;
		try {
			sc2 = new Scanner(new File("./valid_solutions.csv"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		while (sc2.hasNext())  //returns a boolean value
		{
			String word = sc2.next();
			if (!(word.equals("word"))) {
				validAnswers[tracker2] = word;
				tracker2++;
			}
		}
		sc2.close();  //closes the scanner

		for (int i = 0; i < validAnswers.length; i++) {
			validGuesses[10657 + i] = validAnswers[i];
		}

		for (int i = 0; i < validGuesses.length; i++) {
			refinedAnswers.add(validGuesses[i]);
		}
	}

	public void extract_word_list() {
		Path path = Paths.get("..\\\\wordle.project\\\\assets\\\\Words.txt");
		wordList = new ArrayList<>();
		try {
			wordList = Files.readAllLines(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void gen_test_word() {
		if (test_word == "") {
			extract_word_list();
			Random random = new Random();
			test_word = wordList.get(random.nextInt(wordList.size()));
			System.out.println("selected random word: " + test_word);
		}
	}

	public boolean findWord() {
		Character[] result = {'b', 'b', 'b', 'b', 'b'};
		Character[] test = {'g', 'g', 'g', 'g', 'g'};
		ArrayList<String> removeList = new ArrayList<String>();
		Character[] word = {'s', 'a', 'l', 'e', 't'};
		Scanner scn = new Scanner(System.in);  // Create a Scanner object for getting the word the user inputted


//        if (test_word.equals("done")){
//            return true;
//        }
//        else if (test_word.equals("list")){
//            for (int i = 0; i < refinedAnswers.size(); i ++){
//                System.out.print(refinedAnswers.get(i));
//                if (i != refinedAnswers.size() - 1){
//                    System.out.print(", ");
//                }
//            }
//            System.out.println("");
//        }
		if (!test_word.equals("reroll")) {
			for (int i = 0; i < word.length; i++) {
				word[i] = test_word.substring(i, i + 1).charAt(0);
			}

//			System.out.println("Wordle  color sequence ?");
//			String out = scn.nextLine();
			String out = this.color_string;
			String[] out_arr = out.split("");
			for (int i = 0; i < word.length; i++) {
				result[i] = out_arr[i].charAt(0);
			}
			//scn.close();
			for (int i = 0; i < result.length; i++) {
				if (result[i] == 'b') {
					for (int j = 0; j < refinedAnswers.size(); j++) {
						if (refinedAnswers.get(j).indexOf(word[i]) == -1) {
							if (!blackLetters.contains(word[i])) {
								blackLetters.add(word[i]);
							}
						}
					}
				}
				if (result[i] == 'y') {
					for (int j = 0; j < refinedAnswers.size(); j++) {
						String currentWord = refinedAnswers.get(j);
						Character yellowLetter = word[i];
						if (currentWord.indexOf(yellowLetter) != -1) {
							if (currentWord.charAt(i) == yellowLetter) {
								removeList.add(currentWord);
							}
						} else {
							removeList.add(refinedAnswers.get(j));
						}
					}
				}
				if (result[i] == 'g') {
					for (int j = 0; j < refinedAnswers.size(); j++) {
						if (refinedAnswers.get(j).charAt(i) != word[i]) {
							removeList.add(refinedAnswers.get(j));
						}
					}
				}
			}
			for (int i = 0; i < refinedAnswers.size(); i++) {
				boolean contains = false;
				for (int j = 0; j < blackLetters.size(); j++) { //breakpoint
					if (refinedAnswers.get(i).contains(blackLetters.get(j) + "")) {
						contains = true;
					}
				} //breakpoint

				if (contains) {
					removeList.add(refinedAnswers.get(i));
				}
			}
			for (int i = 0; i < removeList.size(); i++) {
				refinedAnswers.remove(removeList.get(i));
			}
			count++;
		}


		if (result == test) {
			System.out.println("Nice! Got it in " + count + " tries!");
			return true;
		}

		Random rand = new Random();
		String finalWord = refinedAnswers.get(rand.nextInt(refinedAnswers.size()));
		ArrayList<String> words = new ArrayList<String>();
		ArrayList<Integer> wordFreq = new ArrayList<Integer>();
		int score = 0;
		wordFrequency finalElement = new wordFrequency(refinedAnswers.get(0), 0);
		ArrayList<String> validAnswersAsList = new ArrayList<String>();
		for (int i = 0; i < validAnswers.length; i++) {
			validAnswersAsList.add(validAnswers[i]);
		}
		for (int i = 0; i < listOfWords.size(); i++) {
			words.add(listOfWords.get(i).getWord());
			wordFreq.add(listOfWords.get(i).getNum());
		}
		for (int i = 0; i < refinedAnswers.size(); i++) {
			if (!words.contains(refinedAnswers.get(i))) {
				score = 0;
			} else {
				wordFrequency element = new wordFrequency(refinedAnswers.get(0), 0);
				for (int j = 0; j < listOfWords.size(); j++) {
					if (listOfWords.get(j).getWord().equals(refinedAnswers.get(i))) {
						element = listOfWords.get(j);
					}
				}
				if (element.getNum() > score) {
					if (validAnswersAsList.contains(element.getWord())) {
						score = element.getNum();
						finalElement = element;
					}
				}
			}
		}

		finalWord = finalElement.getWord();
		test_word = finalWord;
		System.out.println("Recommendation: " + finalWord);

		return false;
	}
}




// link to make-it-work : https://stackoverflow.com/questions/59601077/intellij-errorjava-error-release-version-5-not-supported